#!/usr/bin/env node

/**
 * Module dependencies.
 */

var http = require('http');
var server = http.createServer();
var app = require('../app');
var mosca = require('mosca');
var path = require('path');
var debug = require('debug')('autom-8-demo:server');

/**************************************
  MQTT broker setup and start
 **************************************/
var moscaSettings = {port:1884, host:'localhost'};
var broker = new mosca.Server(moscaSettings);
app.set('mqtt-broswer-path', path.dirname(require.resolve("mosca")));
broker.on('ready', function (){
  debug('MQTT broker started. Pub at %s', app.get('mqtt-broswer-path'));
});

/**************************************
  Express app initialisation and start
  *************************************/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('server', server);

/**
 * Attach HTTP server to app.
 */

server.on('request', app);

/**
 *  Now the app is setup, initialise it
 */
app.get('initialise')();

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
